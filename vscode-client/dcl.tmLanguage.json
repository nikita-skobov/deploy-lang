{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "dcl",
  "fileTypes": [
    "dcl"
  ],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "begin": "^(state)",
      "end": "^$",
      "beginCaptures": {
        "1": { "name": "keyword.control.dcl" }
      },
      "patterns": [
        {
          "match": "(file)(\\s+)([^#]+)",
          "captures": {
            "1": { "name": "entity.name.type.enum.dcl" },
            "3": { "name": "string.unquoted.argument.dcl" }
          }
        }
      ]
    },
    {
      "begin": "^(resource)\\s+(\\w+)\\((\\w+)\\)",
      "end": "^$",
      "beginCaptures": {
        "1": { "name": "keyword.control.dcl" },
        "2": { "name": "entity.name.function.dcl" },
        "3": { "name": "variable.other.dcl" }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#json"
        }
      ]
    },
    {
      "begin": "^(function)\\s+(javascript)\\((\\w+)\\)",
      "end": "^$",
      "beginCaptures": {
        "1": { "name": "keyword.control.dcl" },
        "2": { "name": "entity.name.function.dcl" },
        "3": { "name": "variable.other.dcl" }
      },
      "patterns": [
        {
          "include": "source.ts"
        }
      ]
    },
    {
      "begin": "^(template)(\\s)([^#]+)",
      "end": "^$",
      "beginCaptures": {
        "1": { "name": "keyword.control.dcl" },
        "3": { "name": "entity.name.function.dcl" }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "begin": "^(\\s+)(create|update|delete)",
          "end": "(?=^\\1\\w|^$)",
          "beginCaptures": {
            "2": { "name": "entity.name.type.enum.dcl" }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "match": "^(\\s+)(@[\\w-]+)(\\s*)?([^#]+)?",
              "captures": {
                "2": {
                  "name": "storage.type.dcl"
                },
                "4": {
                  "patterns": [
                    { "include": "#json" }
                  ]
                }
              }
            },
            {
              "begin": "^(\\s+)(\\w+)(\\s)?([^#]+)?",
              "end": "(?=^\\1\\S|^\\s+(create|update|delete)\\b|^$)",
              "beginCaptures": {
                "2": { "name": "entity.name.function.dcl" },
                "4": { "name": "string.unquoted.argument.dcl" }
              },
              "patterns": [
                {
                  "include": "#comment"
                },
                {
                  "match": "^(\\s+)(\\.\\.\\.)([^#]+)",
                  "captures": {
                    "3": { "name": "variable.other.constant.dcl" }
                  }
                },
                {
                  "match": "^(\\s+)(\\!)([^#]+)",
                  "captures": {
                    "3": { "name": "variable.other.dcl" }
                  }
                },
                {
                  "match": "^(\\s+)([\\w-]+)(\\s)([^#]+)",
                  "captures": {
                    "2": { "name": "variable.other.dcl" },
                    "4": { "name": "variable.other.constant.dcl" }
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "repository": {
    "comment": {
      "name": "comment.line.number-sign.dcl",
      "match": "#.*$"
    },
    "constant": {
      "match": "\\b(?:true|false|null)\\b",
      "name": "constant.language.json"
    },
    "number": {
      "match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
      "name": "constant.numeric.json"
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.json"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.json"
        }
      },
      "name": "string.quoted.double.json",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape.json"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.json"
        }
      ]
    },
    "array": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.json"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.json"
        }
      },
      "name": "meta.structure.array.json",
      "patterns": [
        {
          "include": "#json"
        },
        {
          "match": ",",
          "name": "punctuation.separator.array.json"
        },
        {
          "match": "[^\\s\\]]",
          "name": "invalid.illegal.expected-array-separator.json"
        }
      ]
    },
    "objectkey": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.begin.json"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.end.json"
        }
      },
      "name": "string.json support.type.property-name.json",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "object": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.begin.json"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end.json"
        }
      },
      "name": "meta.structure.dictionary.json",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "comment": "the JSON object key",
          "include": "#objectkey"
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.dictionary.key-value.json"
            }
          },
          "end": "(,)|(?=\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.dictionary.pair.json"
            }
          },
          "name": "meta.structure.dictionary.value.json",
          "patterns": [
            {
              "comment": "the JSON object value",
              "include": "#json"
            },
            {
              "match": "[^\\s,]",
              "name": "invalid.illegal.expected-dictionary-separator.json"
            }
          ]
        },
        {
          "match": "[^\\s\\}]",
          "name": "invalid.illegal.expected-dictionary-separator.json"
        }
      ]
    },
    "jsonpath": {
      "match": "\\$(\\.([\\w]+|\\*)|\\[([-\\d]+|('[\\w\\ \\-\\d]*'|\"[\\w\\ \\-\\d]*\"))\\])*",
      "name": "variable.other.constant.dcl"
    },
    "json": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#jsonpath"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#array"
        },
        {
          "include": "#object"
        }
      ]
    }
	},
  "scopeName": "source.dcl"
}
